SYMBOL_TABLE(tbl 101 31
	     symbol_compare_string
	     symbol_hash_string
	     symbol_print_string
	     [* char* id; integer i; *]
	    )
	
S    ::=  { DECL | STMT(1) }.

DECL ::= 'int' ID:name 
          [* if (symbol_lookup_key(tbl, &name, NULL))
                 text_message(TEXT_ERROR, "redeclaration of %s\n", name);
             else
                 symbol_insert_key(tbl, &name, sizeof(char*), sizeof(tbl_data));
          *]
          ['=' EXPR:val [* tbl_cast(symbol_lookup_key(tbl, &name, NULL))->i = val; *]].

STMT(flag:int) ::= ID:name '=' EXPR:val
                   [* if (flag) {
                          if (!symbol_lookup_key(tbl, &name, NULL))
                              text_message(TEXT_ERROR, "%s undeclared\n", name);
                          else
                              tbl_cast(symbol_lookup_key(tbl, &name, NULL))->i = val;
                      }
                   *] |
                   'if' BOOL:cond [* cond = cond && flag; *] 'then' STMT(cond) |
                   'print' EXPR:val
                   [* if (flag) {
                          printf("%i\n", val);
                      }  
                   *]. 

BOOL:int ::= EXPR:result { '==' EXPR:val [* result = result == val; *] |
                           '!=' EXPR:val [* result = result != val; *] } .

EXPR:int ::= PRIMITIVE:result { '+' PRIMITIVE:val [* result += val;  *] | 
                                '-' PRIMITIVE:val [* result -= val;  *] }.   

PRIMITIVE:int ::= INTEGER:result | 
              ID:name 
              [* if (!symbol_lookup_key(tbl, &name, NULL))
                     text_message(TEXT_ERROR, "%s undeclared\n", name);
                 else 
                     result = tbl_cast(symbol_lookup_key(tbl, &name, NULL))->i;
              *].  
