* final_Project
   * documents
      * zfac127.final.pdf - The final report document for this project
      * ecc_user_manual.pdf - The user manual for the ecc compiler
   * ecc
      * bin
         * cgen - The code generation program used by ecc
         * rdparser - The parser used by ecc
      * src
         * cgen
            * Cgen.c - The main source file for the code generator
            * Mips.c - Contains the code generators implementation of the mips architecture
            * Mips.h -  The header file for mips.c
            * Quad.c -  Contains the logic which converts TAC instructions into quads
            * Quad.h - The header file for quad.c
            * sym_tbl.c  - An implementation of a symbol table
            * sym_tbl.h - The header file for sym_tbl.c
            * tac.c - Contains the set of keywords and operations which can appear in a TAC file. Also contains functions used by quad.c to parse TAC files.
            * Tac.h - The header file for tac.c
            * Target.h - Contains the type definition of target, which is a generic template for different machine architectures.
         * parser
            * Func.bnf - The grammar for the C subset language which ecc compiles
            * Ma_aux.c - An auxiliary file containing functions for generating temporary variables and labels for use in three address code generation
            * Ma_aux.h - The header file for ma_aux.c
            * Queue.c - An implementation of a queue, used for temporary storage of array elements submitted via an initializer list during the parse phase
            * Queue.h - the header file for queue.c
            * Rdparser.c - The source file for the parser, generated by rdp and func.bnf
            * Rdparser.h - the header file for rdparser.c
            * Scope_chain.c - An implementation of a scope chain, which is effectively a linked list. This is used in place of rdp’s internal scope chain.
            * Scope_chain.h - the header file for scope_chain.c
            * Stack.c - An implementation of a stack, used for keeping track of whether the parser is inside a loop or not.
            * Stack.h - the header file for stack.c
            * Tbl_aux.h - Contains the file handle used to output symbol table information
            * Type.h - Contains an enum which manages the different data types available in the C subset language which ecc compiles
         * README.txt - describes the contents of the cgen and parser folders
      * Test
         * Examples
            * Bubsort
               * Bubs.a - An executable mips program which sorts of array of integers
               * Bubs.c - The C source file for the bubs program
               * Bubs.tac - The TAC file for the bubs program
               * Bubs.tbl - The symbol table file for the bubsort program
               * Bubs_test_output.png - A screenshot of bub’s output
               * README.txt - A description of bub’s purpose
            * Fib
               * Fib.a - An executable mips program which displays the first 10 fibonacci  numbers
               * Fib.c -The C source file for the fib program
               * Fib.tac - The TAC file for the fib program
               * Fib.tbl - The symbol table file for the fib program
               * Fib_test_output.png - A screenshot of fib’s output
               * README.txt - A description of fib’s purpose
            * Prime
               * Prime.a - An executable mips program which calculates attempts to calculate every prime number from 1 to 231-1
               * Prime.c -The C source file for the prime program
               * Prime.tac - The TAC file for the prime program
               * Prime.tbl - The symbol table file for the prime program
               * Prime_test_output.png - A screenshot of prime.a running
               * README.txt - A description of prime’s purpose
            * Sum
               * Sum.a -An executable mips program which calculates the sum of integers from 1 to 20
               * Sum.c - The C source file for the sum program
               * Sum.tac - The TAC file for the sum program
               * Sum.tbl - The symbol table file for the sum program
               * Sum_test_output.png - A screenshot of sum’s output
               * README.txt - A description of sum’s purpose
         * cgen - The code generation program use dby ecc
         * ecc.sh - A shell script to make use of the compiler more practical
         * rdparser - The parser used by ecc
   * various grammars
      * Conditional grammar
         * cond - executable binary / parser with working conditional statements
         * cond.bnf - grammar used by rdp to generate cond source files
         * cond.c - rdp generated source file, contains implementation for cond
         * cond.h - rdp generated header file, used by cond.c
         * cond.o - object code generated by gcc and cond source files
         * cond.str - input string parsable by cond
         * cond_output.png - output from cond binary / cond.str
         * cond_test_output.png - output from cond.bnf / cond.str from rdp
         * README.txt - explains cond’s inclusion in hand in
      * emit
         * emit.bnf - An example grammar which emits three address code
         * emit.str - input string for parsable by the grammar in emit.bnf
         * emit.tac - A file containing three address code which emit outputs
         * README - describes the purpose of emit.bnf
      * initial grammar
         * cll1 - executable binary / parser without semantic actions
         * cll1.bnf - grammar used by rdp to generate cll1 source files
         * cll1.c - rdp generated source file, contains implementation for cll1
         * cll1.h - rdp generated header file, used by cll1.c
         * cll1.o - object code generated by gcc and cll1 source files
         * cll1.str - input string parsable by cll1
         * cll1_test_output.png - output from cll1.bnf / cll1.str from rdp
         * README.txt - describes the functionality of expr
      * scope
         * README - describes the purpose of scope.bnf
         * scope.bnf - An example grammar which implements scoping rules
         * scope.str - input string parsable by the grammar in scope.bnf
      * semantic grammar
         * expr - executable binary / parser with working expression evaluation
         * expr.bnf - grammar used by rdp to generate expr source files
         * expr.c - rdp generated source file, contains implementation for expr
         * expr.h - rdp generated header file, used by expr.c
         * expr.o - object code generated by gcc and expr source files
         * expr.str - input string parsable by expr                
         * expr_output.png - output from expr binary / expr.str
         * expr_test_output.png - output from expr.bnf / expr.str from rdp
         * README.txt - describes the functionality of expr
   * README.md - contains the changelog for the project
   * README.txt - contains a description of the file directory of the project folder